#!/usr/bin/env python

# To install: pip install -I "impacket"

import cmd
import os
import sys

from impacket.examples import logger
from impacket import version
from impacket.dcerpc.v5.dtypes import NULL
from impacket.dcerpc.v5.dcom import wmi
from impacket.dcerpc.v5.dcomrt import DCOMConnection
from impacket.dcerpc.v5.rpcrt import RPC_C_AUTHN_LEVEL_PKT_PRIVACY, RPC_C_AUTHN_LEVEL_PKT_INTEGRITY

if len(sys.argv) != 5:
    print("Usage: " + sys.argv[0] + " host username password command")
    sys.exit(1)

host = sys.argv[1]
username = sys.argv[2]
password = sys.argv[3]
commands = sys.argv[4]


class WMIQUERY(cmd.Cmd):
    def __init__(self, iWbemServices):
        cmd.Cmd.__init__(self)
        self.iWbemServices = iWbemServices

    def do_shell(self, s):
        os.system(s)

    def do_describe(self, sClass):
        sClass = sClass.strip('\n')
        if sClass[-1:] == ';':
            sClass = sClass[:-1]
        try:
            iObject, _ = self.iWbemServices.GetObject(sClass)
            iObject.printInformation()
            iObject.RemRelease()
        except Exception as e:
            print(str(e))

    def printReply(self, iEnum):
        printHeader = True
        while True:
            try:
                pEnum = iEnum.Next(0xffffffff, 1)[0]
                record = pEnum.getProperties()
                if printHeader is True:
                    print('|', end=' ')
                    for col in record:
                        print('%s |' % col, end=' ')
                    print()
                    printHeader = False
                print('|', end=' ')
                for key in record:
                    if type(record[key]['value']) is list:
                        for item in record[key]['value']:
                            print(item, end=' ')
                        print(' |', end=' ')
                    else:
                        print('%s |' % record[key]['value'], end=' ')
                print()
            except Exception as e:
                if str(e).find('S_FALSE') < 0:
                    raise
                else:
                    break
        iEnum.RemRelease()

    def default(self, line):
        line = line.strip('\n')
        if line[-1:] == ';':
            line = line[:-1]
        try:
            iEnumWbemClassObject = self.iWbemServices.ExecQuery(line.strip('\n'))
            self.printReply(iEnumWbemClassObject)
            iEnumWbemClassObject.RemRelease()
        except Exception as e:
            print(e)

    def emptyline(self):
        pass

    def do_exit(self, line):
        return True


def connect_and_execute(host, username, password, command):
    try:
        '''
        dcom = DCOMConnection(address, username, password, domain, lmhash, nthash, options.aesKey, oxidResolver=True,
                              doKerberos=options.k, kdcHost=options.dc_ip)
      '''
        dcom = DCOMConnection(host, username, password)

        iInterface = dcom.CoCreateInstanceEx(wmi.CLSID_WbemLevel1Login,wmi.IID_IWbemLevel1Login)
        iWbemLevel1Login = wmi.IWbemLevel1Login(iInterface)
        iWbemServices= iWbemLevel1Login.NTLMLogin('//./root/cimv2', NULL, NULL)

        iWbemLevel1Login.RemRelease()

        shell = WMIQUERY(iWbemServices)
        shell.onecmd(command)

        iWbemServices.RemRelease()
        dcom.disconnect()
    except Exception as e:
        print(e)
        try:
            dcom.disconnect()
        except:
            sys.exit(1)

'''
    try:
        s = winrm.Session(host, auth=(username, password), transport='ntlm')
        split = command.split(" ")
        if len(split) == 1:
            r = s.run_cmd(split[0], [])
        else:
            r = s.run_cmd(split[0], split[1:])
        return_code = r.status_code
        stdout_output = r.std_out.decode('utf-8')
        stderr_output = r.std_err.decode('utf-8')
        return return_code, ''.join(stdout_output), ''.join(stderr_output)
    except Exception as e:
        print(e)
        sys.exit(1)

last_command_output = ""
for command in commands:
    rc, command_stdout, command_stderr = connect_and_execute(host, username, password, command)
    if rc != 0:
        print("ERROR: Command ran unsuccessfully: " + str(command))
        print(command_stderr)
        sys.exit(1)
    last_command_output = command_stdout.rstrip()

print("SUCCESS")
print(last_command_output)
'''